Tales expressions
*****************

Define a slot
=============

  >>> from dolmen.tales import SlotExpr
  >>> from cromlech.browser.interfaces import IViewSlot
  >>> from zope.component import provideAdapter
  >>> from zope.interface import Interface

  >>> class Slot():
  ...    def __init__(self, context, request, view):
  ...        pass
  ...
  ...    def update(self): pass
  ...
  ...    def render(self):
  ...        return u"My nice slot"

  >>> provideAdapter(Slot, (Interface, Interface, Interface),
  ...                IViewSlot, name='test')


Declaring the TALES expression
==============================

  >>> from dolmen.template import TALTemplate

  >>> class Template(TALTemplate):
  ...    expression_types = {'slot': SlotExpr}


Implementing a renderer to query the slot
=========================================

  >>> class View(object):
  ...
  ...     template = Template(
  ...          string="My slot here: <tal:slot content='slot:test' />")
  ...
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...
  ...     def namespace(self):
  ...         namespace = {}
  ...         namespace['context'] = self.context
  ...         namespace['request'] = self.request
  ...         namespace['view'] = self
  ...         return namespace
  ...
  ...     def render(self):
  ...         return self.template.render(self)


Rendering
=========

  >>> context = object()
  >>> request = object()
  >>> view = View(context, request)
  >>> view.render()
  u'My slot here: My nice slot'
